type Kifu {
  bName: String!
  bRank: String!
  content: String!
  createdAt: String
  id: ID!
  komi: String!
  place: String!
  playerBId: String!
  playerWId: String!
  previewImg: String!
  result: String!
  steps: String!
  title: String!
  wName: String!
  wRank: String!
}

type Mutation {
  createProblemRecord(problemRecord: ProblemRecordInput!): ProblemRecord!
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

type Problem implements Node {
  awswerType: Int!
  createdAt: String
  favoriteCount: Int!
  id: ID!
  identifier: Int!
  name: String!
  number: String!
  previewImg: String!
  previewImgR1: PuzzleImgR1Uploader!
  problemAnswers: [ProblemAnswer!]
  puzzleType: Int!
  rank: String!
  rightCount: Int!
  sgf: String!
  steps: String!
  type: Int!
  whofirst: String!
  wrongCount: Int!
}

type ProblemAnswer implements Node {
  answerType: Int!
  createdAt: String!
  descriptions: String
  id: ID!
  identifier: ID!
  number: String
  steps: String
  updatedAt: String!
}

type ProblemRecord implements Node {
  createdAt: String!
  id: ID!
  identifier: ID!
  problem: Problem!
  recordType: String!
  steps: String
  updatedAt: String!
  userId: String
}

"""
Attributes for creating or updating a blog post
"""
input ProblemRecordInput {
  problemId: Int!
  recordType: String!
  steps: String
  userId: String
}

type PuzzleImgR1Uploader {
  x100: String!
  x1000: String!
  x200: String!
  x300: String!
  x400: String!
  x500: String!
  x800: String!
}

type Query {
  """
  Find all kifus
  """
  kifus(last: Int! = 100): [Kifu!]

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!

  """
  Find a problem
  """
  problem(id: ID!): Problem!

  """
  Find all problems
  """
  problems(last: Int! = 100, level: String = "all", tags: String = "all"): [Problem!]

  """
  Find all tags
  """
  tags(last: Int! = 100): [Tag!]
}

type Tag implements Node {
  id: ID!
  name: String!
  taggingsCount: Int!
}